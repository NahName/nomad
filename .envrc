#!/bin/bash

#
# For override this default options please use .envrc.local file
# See documentation/dev_install.md for more info
#

ROOT_PATH="$(pwd)"
PYTHON_VENV_PATH="$ROOT_PATH/venv"
PYTHON_REQUIREMENTS_PATH="requirements.txt"
ANSIBLE_REQUIREMENTS_PATH="requirements.yml"
VIRTUAL_ENV=""
_VENV_CREATED=0

# shellcheck disable=SC2034  # Will be used by the direnv later
DIRENV_LOG_FORMAT="ansible-webapp: %s"


#
# Helper functions
#
get_yes_no() {
    while true; do
        log_status "$1 (Y/N) ?"
        if ! read -r a; then
            a='No'; return
        fi
        case $a in
            [Yy][Ee][Ss]|[Yy]) a='Yes'; return ;;
            [Nn][Oo]|[Nn]) a='No'; return ;;
            *) ;;
        esac
    done
}

# Ensure running via direnv
if ( ! command -v log_error 1>/dev/null ); then
    printf "ERROR  : You cannot use .envrc without direnv!\n"
    return 1
fi

# Ensure running as a normal user
if [ "$(id -un)" = 'root' ]; then
    log_error "ERROR  : Do not run me from the root user!"
    exit 1
fi

# Create python virtualenv if not exists
if [ ! -f "$PYTHON_VENV_PATH/bin/activate" ]; then
    log_status "Create python virtualenv"
    case $(uname -s) in
        Linux) python3 -m venv "$PYTHON_VENV_PATH" --system-site-packages ;;
        Darwin) python3 -m venv "$PYTHON_VENV_PATH" ;;
        *)
            log_error "Unsupported platform"
            exit 1
        ;;
    esac
    _VENV_CREATED=1
fi

# Activate virtualenv if not activated
if [ -z "$VIRTUAL_ENV" ]; then
    # Show PS1 with virtualenv prefix
    export show_virtual_env

    log_status "Activate python virtualenv"
    # shellcheck disable=SC1090
    source "$PYTHON_VENV_PATH/bin/activate"
fi

# Ensure our venv is used
if [ "$PYTHON_VENV_PATH" != "$VIRTUAL_ENV" ]; then
    log_error "ERROR  : Unknown virtualenv detected, cannot proceed"
    log_status "For more info read the docs: documentation/dev_install.md"
    exit 1
fi

# Check pip requirements
if ( pip freeze -qqr "$PYTHON_REQUIREMENTS_PATH" | sed -n '/##/q;p' | sort | diff <(sort "$PYTHON_REQUIREMENTS_PATH") - 1>/dev/null ); then
    log_status "Pip requirements is ok"
else
    log_status "Pip requirements is outdated!"

    # Ensure requirements are only installed inside virtualenv
    if [ -z "$VIRTUAL_ENV" ]; then
        log_error "ERROR  : Cannot install requirements outside the virtual environment!"
        log_status "For more info read the docs: documentation/dev_install.md"
        exit 1
    fi

    pip_cmd="pip install --upgrade pip -r $PYTHON_REQUIREMENTS_PATH"
    # Install requirements automatically if we just created virtualenv
    if [ "$_VENV_CREATED" = 1 ]; then
        $pip_cmd
    else
        log_status "You can install requirements manually with the command:
$pip_cmd"
        get_yes_no 'Do you want to execute this command now'
        [ "$a" = 'No' ] || $pip_cmd
    fi
fi

# Check ansible-galaxy requirements
#_ANSIBLE_GALAXY_REQUIREMENTS=$(python "$ROOT_PATH/hack/ansible-galaxy-check.py" "$ANSIBLE_REQUIREMENTS_PATH")
#if [ -z "$_ANSIBLE_GALAXY_REQUIREMENTS" ]; then
#    log_status "Ansible requirements is ok"
#else
#    ansible_cmd="ansible-galaxy install -gfr $ANSIBLE_REQUIREMENTS_PATH"
#    if [ "$_ANSIBLE_GALAXY_REQUIREMENTS" = 'No installed roles from requirements' ]; then
#        $ansible_cmd
#    else
#        log_status "Ansible requirements is outdated!"
#        log_status "You can install requirements manually with the command:
#$ansible_cmd"
#        log_error 'WARNING: All ansible roles has been overwritten with .git data!'
#        get_yes_no 'Do you want to execute this command now'
#        [ "$a" = 'No' ] || $ansible_cmd
#    fi
#fi

# Load user defined variables
if [ -f "$ROOT_PATH/.envrc.local" ]; then
    # Reset all ANSIBLE_VARIABLES
    for v in $(printenv | awk -F= '/^ANSIBLE_/{print $1}'); do
        unset "$v"
    done
    log_status "Load user defined variables from .envrc.local"
    # shellcheck disable=SC1090
    source "$ROOT_PATH/.envrc.local"
fi

log_status "SUCCESS .envrc loaded successfully!"
